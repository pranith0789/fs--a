There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.
Constraints:

n == graph.length
1 <= n <= 104
0 <= graph[i].length <= n
0 <= graph[i][j] <= n - 1
graph[i] is sorted in a strictly increasing order.
The graph may contain self-loops.
The number of edges in the graph will be in the range [1, 4 * 104].

input=7
7
0 1
0 2
1 2
1 3
2 5
3 0
4 5
output=[2, 4, 5, 6]
import java.util.*;

public class test{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(), m = sc.nextInt();
        int graph[][] = new int[m][2];
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt(), b = sc.nextInt();
            graph[i][0] = a;
            graph[i][1] = b;
        }
        System.out.println(check(n, graph));
    }

    public static List<Integer> check(int n, int edges[][]) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++)
            adj.add(new ArrayList<>());
        for (int d[] : edges) {
            adj.get(d[0]).add(d[1]);
        }
        boolean cycle[] = new boolean[n];
        Arrays.fill(cycle, false);
        boolean vis[] = new boolean[n];
        Arrays.fill(vis, false);
        boolean dfsc[] = new boolean[n];
        Arrays.fill(dfsc, false);
        for (int i = 0; i < n; i++) {
            if (vis[i] == false) {
                dfs(i, vis, cycle, dfsc, adj);
            }
        }
        List<Integer> al = new ArrayList<>();
        for (int i = 0; i < cycle.length; i++) {
            if (!cycle[i])
                al.add(i);
        }
        return al;
    }

    public static boolean dfs(int i, boolean vis[], boolean cycle[], boolean dfsc[], List<List<Integer>> adj) {
        vis[i] = true;
        dfsc[i] = true;
        for (int j : adj.get(i)) {
            if (!vis[j]) {
                if (dfs(j, vis, cycle, dfsc, adj)) {
                    return cycle[i] = true;
                }
            } else if (vis[j] && dfsc[j]) {
                return cycle[i] = true;
            }
        }
        dfsc[i] = false;
        return false;
    }
}