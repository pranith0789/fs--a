/*
There is a network of servers, given in the form of a directed graph and data is constantly being transfered among these servers. You can send the data from a given source server 's' to a destination server 't'. The data has to be tranfered along the disjoint paths. Find the maximum number of disjoint paths through which the data can be transfered.
 
Note:Two paths are said to be disjoint paths, if they donâ€™t share any edge.

 Example:
 input =8
0 1 1 1 0 0 0 0
0 0 1 0 0 0 0 0
0 0 0 1 0 0 1 0
0 0 0 0 0 0 1 0
0 0 1 0 0 0 0 1
0 1 0 0 1 0 0 1
0 0 0 0 0 1 0 1
0 0 0 0 0 0 0 0
0 7

output = 2

 */
import java.util.*;
public class test{
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a[][]=new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                a[i][j]=sc.nextInt();
            }
        }
        int s=sc.nextInt();
        int t=sc.nextInt();
        int r=0;
        int rg[][]=a;
        int p[]=new int[n];
        int m=0;
        while(bfs(rg,s,t,p)){
            //System.out.println(Arrays.toString(p));
            int f=Integer.MAX_VALUE;
            for(int i=t;i!=s;i=p[i]){
                int u=p[i];
                f=Math.min(f,rg[u][i]);
            }
            for(int i=t;i!=s;i=p[i]){
                int u=p[i];
                rg[u][i]-=f;
                //rg[i][u]+=f;
            }
            r+=f;
        }
        System.out.println(r);
        
    }
    static boolean bfs(int g[][],int s,int t,int p[]){
        boolean v[]=new boolean[g.length];
        int n=g.length;
        Queue<Integer>q=new LinkedList<>();
        q.add(s);
        p[s]=-1;
        while(!q.isEmpty()){
            int k=q.poll();
            for(int i=0;i<n;i++){
                if(v[i]==false&&g[k][i]>0){
                    if(i==t){
                        p[t]=k;
                        return true;
                    }
                    v[i]=true;
                    p[i]=k;
                    q.add(i);
                }
            }
        }
        return false;
    }
}